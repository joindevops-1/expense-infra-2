pipeline {
    agent { label 'AGENT-1' }
    environment { 
        PROJECT = 'EXPENSE'
        COMPONENT = 'BACKEND' 
    }
    options {
        disableConcurrentBuilds()
        timeout(time: 30, unit: 'MINUTES')
        ansiColor('xterm')
    }
    parameters{
        choice(name: 'ACTION', choices: ['apply', 'destroy'], description: 'Pick something')
    }
    stages {
        stage('Init') {
            steps {
               script{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 10-sg
                        terraform init -reconfigure
                        terraform plan -out tfplan
                    """
                }
                 
               }
            }
        }
        stage('Apply') {
            // input {
            //     message "Should we continue?"
            //     ok "Yes, we should."
            // }
            steps {
               script{
                withAWS(region: 'us-east-1', credentials: 'aws-creds') {
                    sh """
                        cd 10-sg
                        if [ ${params.ACTION} == 'apply' ]
                            then
                                terraform apply -auto-approve tfplan
                            elif [ ${params.ACTION} == 'destroy' ]
                            then
                                terraform destroy -auto-approve
                        fi
                    """
                }
                 
               }
            }
        }

        stage('Parallel') {
            when {
                expression { params.ACTION == 'apply' }
            }
            parallel {
                stage('Bastion') {
                    steps {
                        build job: '20-bastion', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('RDS') {
                    steps {
                        build job: '30-rds', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                stage('EKS') {
                    steps {
                        build job: '40-eks', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
                
                stage('ECR') {
                    steps {
                        build job: '41-ecr', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
        }
        stage('Sequential') {
            when {
                expression { params.ACTION == 'apply' }
            }
            stages {
                stage('ACM') {
                    steps {
                        build job: '50-acm', parameters: [string(name: 'ACTION', value: "apply")]
                    }
                }
                stage('ALB') {
                    steps {
                        build job: '60-ingress-alb', parameters: [string(name: 'ACTION', value: "apply")], wait: false
                    }
                }
            }
                
        }
    }
    post { 
        always { 
            echo 'I will always say Hello again!'
            deleteDir()
        }
        failure { 
            echo 'I will run when pipeline is failed'
        }
        success { 
            echo 'I will run when pipeline is success'
        }
    }
}